maker 注释
#加载基因组
#source /public/home/software/.bashrc 

#准备输入文件
#1、针对拼接好的基因组进行重复序列的屏蔽 (repeatmask)
#BSUB -J repaet
#BSUB -n 36
#BSUB -R span[hosts=1]
#BSUB -o %J.out
#BSUB -e %J.err
#BSUB -q normal
RepeatMasker -parallel 36 -species Meloidogyne -html -gff -dir repeat Mi_sort.fasta

#reform.sh（对于repaetmask 的结果）
for i in *.cat.gz
do
echo $i
gunzip $i
ProcessRepeats ${i/.gz/};
perl ~/software/RepeatMasker/util/rmOutToGFF3.pl ${i/.cat.gz/.out} > ${i/.cat.gz/.gff3};
grep -v -e "Satellite" -e ")n" -e "-rich"  ${i/.cat.gz/.gff3} > ${i/.cat.gz/.complex.gff3};

cat ${i/.cat.gz/.complex.gff3} |  perl -ane '$id; if(!/^\#/){@F = split(/\t/, $_); chomp $F[-1];$id++; $F[-1] .= "\;ID=$id"; $_ = join("\t", @F)."\n"} print $_' > ${i/.cat.gz/.reformat.gff3};
done

生成 Mi_sort.fasta.reformat.gff3等文件

#2、对所有时期的转录本使用Thirty 组装后合并，去冗余 (Cd-hit)
#BSUB -J cdhit
#BSUB -n 20
#BSUB -R span[hosts=1]
#BSUB -o %J.out
#BSUB -e %J.err
#BSUB -q normal
cd-hit-est -i Mi_CDS.fasta -o Mi_CDS_cdhit.fasta -c 0.99 -d 0 -T 20 -M 3000

#3、近源物种的蛋白质序列的合并

********************************************************************************************************************************************************************************************************************************************************************************************************************************************************



#Round1  maker第一轮
maker -CTL

出现maker_bopts.ctl  maker_evm.ctl  maker_exe.ctl  maker_opts.ctl 四个程序

修改maker_opts.ctl文件
genome 设置为参考基因组的文件（未屏蔽重复序列的Ref）
est  设置为Thrinity 拼接后的去冗余的文件
protein 设置为近缘物种的蛋白序列
est2genome=1
protein2genome=1
repeat_protein=/public/home/csxie/software/maker/data/te_proteins.fasta #provide a fasta file of transposable element proteins for RepeatRunner
rm_gff=/public/home/csxie/data/group18/group18.fasta.reformat.gff3 

软件环境的配置
source /public/home/software/.bashrc
module purge
module load maker/3.01.02-beta-MPICH2
conda activate agauagst  激活agauagst 环境

!!!环境配置后一定要检查程序运行所调用的软件
which maker  # 142版本
which agauagst agauagst的环境

#并行运算提交脚本

#BSUB -J MPIJob       	### set the job Name
#BSUB -q parallel        ### specify queue
#BSUB -n 60           	### ask for number of cores (default: 1)
#BSUB -R "span[ptile=10]"   	### ask for 20 cores per node
#BSUB -W 10:00        	### set walltime limit: hh:mm
#BSUB -o stdout_%J.out  	### Specify the output and error file. %J is the job-id 
#BSUB -e stderr_%J.err  	### -o and -e mean append, -oo and -eo mean overwrite 

#source /public/home/software/.bashrc
#module purge
#module load maker/3.01.02-beta-MPICH2

mpirun -np 60 maker -base round1 maker_bopts.ctl maker_exe.ctl round1_opts.ctl 2>&1

运行完成后进入round1的结果中
#snap.sh进行训练 （snap.sh）
#使用 sh snap.sh (加上头文件)

#################################################
################################################
########## Tarining Snap ######################
###############################################
dir=$1
dir_f=${dir}_snap
mkdir $dir_f

gff3_merge -d ${dir}_master_datastore_index.log

fasta_merge -d ${dir}_master_datastore_index.log

maker2zff -x 0.25 ${dir}.all.gff

mv genome.* ${dir}_snap

cd ${dir}_snap


#augustus.sh进行augustus的训练 (augustus.sh 在conda msq的环境下)
echo "snap is finished ! "
echo "BUSCO is started ! "
dir=$1
ref=$2
samtools faidx $ref
mkdir augustus_${dir}
gff3_merge -n -s -d ${dir}_master_datastore_index.log > ${dir}.noseq.gff
cd augustus_${dir}

awk -v OFS="\t" '{ if ($3 == "mRNA") print $1, $4, $5 }' ../${dir}.noseq.gff |\
awk -v OFS="\t" '{ if ($2 < 1000) print $1, "0", $3+1000; else print $1, $2-1000, $3+1000 }' |\
bedtools getfasta -fi ../${ref} -bed - -fo ${dir}.trans1000.fasta
python /public/home/csxie/software/busco-master/scripts/run_BUSCO.py -i round1.trans1000.fasta -o Train_augs -l ../../nematoda_odb9/ -m genome -c 36 --long -
z -sp caenorhabditis --augustus_parameters='--progress=true'
echo "emmmmmmmmmmmmmmmmmmmmmmmm"
echo "training finished! "

#Lsf 脚本
#BSUB -J msq
#BSUB -n 36
#BSUB -R span[hosts=1]
#BSUB -o %J.out
#BSUB -e %J.err
#BSUB -q normal
sh augustus.sh round1 Ref



#sh extra.sh 此脚本的运行需要更改路径
awk '{ if ($2 == "est2genome") print $0 }' round1.maker.output/round1.noseq.gff > round1_est.gff
awk '{ if ($2 == "protein2genome") print $0 }' round1.maker.output/round1.noseq.gff > round1_pro.gff
awk '{ if ($2 ~ "repeat") print $0 }' round1.maker.output/round1.noseq.gff > round1.rm.gff

生成 round1_est.gff round1_pro.gff round1_rm.gff



#maker第二轮运行 （base环境下）

将第一轮augustus的结果拷贝到指定路径的文件夹

cp -r retraining_parameters/ /public/home/csxie/miniconda2/envs/augustus/config/species/   #拷贝augustus结果

round2.lsf 主程序
#BSUB -J MPIJob       	### set the job Name
#BSUB -q parallel        ### specify queue
#BSUB -n 80           	### ask for number of cores (default: 1)
#BSUB -R "span[ptile=10]"   	### ask for 20 cores per node
##BSUB -W 10:00        	### set walltime limit: hh:mm
#BSUB -o stdout_%J.out  	### Specify the output and error file. %J is the job-id 
#BSUB -e stderr_%J.err  	### -o and -e mean append, -oo and -eo mean overwrite 
#source /public/home/software/.bashrc
module purge
module load maker/3.01.02-beta-MPICH2
#mpiexec -n 60 maker -base round2 round2_opts.ctl maker_exe.ctl maker_opts.ctl 2>&1
mpirun -n 80 maker -base round2 round2_opts.ctl maker_exe.ctl maker_opts.ctl 2>&1



#修改opts.CTL文件
（主要修改是添加snap 与 augustus训练后的模型，以及est.gff 与 protein.gff）
########################################################################################################################
#genome=Mi.masked.fasta #genome sequence (fasta file or fasta embeded in GFF3 file)
organism_type=eukaryotic #eukaryotic or prokaryotic. Default is eukaryotic

#-----Re-annotation Using MAKER Derived GFF3
maker_gff= #MAKER derived GFF3 file
est_pass=0 #use ESTs in maker_gff: 1 = yes, 0 = no
altest_pass=0 #use alternate organism ESTs in maker_gff: 1 = yes, 0 = no
protein_pass=0 #use protein alignments in maker_gff: 1 = yes, 0 = no
rm_pass=0 #use repeats in maker_gff: 1 = yes, 0 = no
model_pass=0 #use gene models in maker_gff: 1 = yes, 0 = no
pred_pass=0 #use ab-initio predictions in maker_gff: 1 = yes, 0 = no
other_pass=0 #passthrough anyything else in maker_gff: 1 = yes, 0 = no

#-----EST Evidence (for best results provide a file for at least one)
#est=Mi_CDS_cdhit.fasta#set of ESTs or assembled mRNA-seq in fasta format
altest= #EST/cDNA sequence file in fasta format from an alternate organism
#est_gff=/public/home/csxie/msq/Mi/ann/round1/round1_est.gff #aligned ESTs or mRNA-seq from an external GFF3 file
altest_gff= #aligned ESTs from a closly relate species in GFF3 format

#-----Protein Homology Evidence (for best results provide a file for at least one)
#protein=affinis.fasta #protein sequence file in fasta format (i.e. from mutiple organisms)
#protein_gff=/public/home/csxie/msq/Mi/ann/round1/round1_pro.gff #aligned protein homology evidence from an external GFF3 file

#-----Repeat Masking (leave values blank to skip repeat masking)
model_org=all #select a model organism for RepBase masking in RepeatMasker
rmlib= #provide an organism specific repeat library in fasta format for RepeatMasker
repeat_protein=/public/home/csxie/software/maker/data/te_proteins.fasta #provide a fasta file of transposable element proteins for RepeatRunner
rm_gff=/public/home/csxie/msq/Mi/ann/round1/round1.rm.gff #pre-identified repeat elements from an external GFF3 file
prok_rm=0 #forces MAKER to repeatmask prokaryotes (no reason to change this), 1 = yes, 0 = no
softmask=1 #use soft-masking rather than hard-masking in BLAST (i.e. seg and dust filtering)

#-----Gene Prediction
#snaphmm=round1.hmm #SNAP HMM file
gmhmm= #GeneMark HMM file
#augustus_species=BUSCO_Train_augs_1820966605 #Augustus gene prediction species model
fgenesh_par_file= #FGENESH parameter file
pred_gff= #ab-initio predictions from an external GFF3 file
model_gff= #annotated gene models from an external GFF3 file (annotation pass-through)
run_evm=0 #run EvidenceModeler, 1 = yes, 0 = no
est2genome=0 #infer gene predictions directly from ESTs, 1 = yes, 0 = no
protein2genome=0 #infer predictions from protein homology, 1 = yes, 0 = no
trna=0 #find tRNAs with tRNAscan, 1 = yes, 0 = no
snoscan_rrna= #rRNA file to have Snoscan find snoRNAs
snoscan_meth= #-O-methylation site fileto have Snoscan find snoRNAs
unmask=0 #also run ab-initio prediction programs on unmasked sequence, 1 = yes, 0 = no
allow_overlap= #allowed gene overlap fraction (value from 0 to 1, blank for default)

#-----Other Annotation Feature Types (features MAKER doesn't recognize)
other_gff= #extra features to pass-through to final MAKER generated GFF3 file

#-----External Application Behavior Options
alt_peptide=C #amino acid used to replace non-standard amino acids in BLAST databases
cpus=1 #max number of cpus to use in BLAST and RepeatMasker (not for MPI, leave 1 when using MPI)

#-----MAKER Behavior Options
max_dna_len=100000 #length for dividing up contigs into chunks (increases/decreases memory usage)
min_contig=1 #skip genome contigs below this length (under 10kb are often useless)

pred_flank=200 #flank for extending evidence clusters sent to gene predictors
pred_stats=0 #report AED and QI statistics for all predictions as well as models
AED_threshold=1 #Maximum Annotation Edit Distance allowed (bound by 0 and 1)
min_protein=0 #require at least this many amino acids in predicted proteins
alt_splice=0 #Take extra steps to try and find alternative splicing, 1 = yes, 0 = no
always_complete=0 #extra steps to force start and stop codons, 1 = yes, 0 = no
map_forward=0 #map names and attributes forward from old GFF3 genes, 1 = yes, 0 = no
keep_preds=0 #Concordance threshold to add unsupported gene prediction (bound by 0 and 1)

split_hit=10000 #length for the splitting of hits (expected max intron size for evidence alignments)
min_intron=20 #minimum intron length (used for alignment polishing)
single_exon=0 #consider single exon EST evidence when generating annotations, 1 = yes, 0 = no
single_length=250 #min length required for single exon ESTs if 'single_exon is enabled'
correct_est_fusion=0 #limits use of ESTs in annotation to avoid fusion genes

tries=100 #number of times to try a contig if there is a failure for some reason
clean_try=0 #remove all data from previous run before retrying, 1 = yes, 0 = no
clean_up=0 #removes theVoid directory with individual analysis files, 1 = yes, 0 = no
TMP= #specify a directory other than the system default temporary directory for temporary files
##################################################################################################################




# maker_exe.opt (配置文件较于第一轮的有差别，主要使用的是本地安装的软件) 
###################################################################################################################
#-----Location of Executables Used by MAKER/EVALUATOR
makeblastdb=/public/home/software/opt/bio/software/BLAST+/2.7.1/bin/makeblastdb #location of NCBI+ makeblastdb executable
blastn=/public/home/software/opt/bio/software/BLAST+/2.7.1/bin/blastn #location of NCBI+ blastn executable
blastx=/public/home/software/opt/bio/software/BLAST+/2.7.1/bin/blastx #location of NCBI+ blastx executable
tblastx=/public/home/software/opt/bio/software/BLAST+/2.7.1/bin/tblastx #location of NCBI+ tblastx executable
formatdb= #location of NCBI formatdb executable
blastall= #location of NCBI blastall executable
xdformat= #location of WUBLAST xdformat executable
blasta= #location of WUBLAST blasta executable
prerapsearch= #location of prerapsearch executable
rapsearch= #location of rapsearch executable
RepeatMasker=/public/home/software/opt/bio/software/RepeatMasker/4.0.7/RepeatMasker #location of RepeatMasker executable
exonerate=/public/home/software/opt/bio/software/exonerate/2.4.0/bin/exonerate #location of exonerate executable

#-----Ab-initio Gene Prediction Algorithms
snap=/public/home/software/opt/bio/software/snap/snap #location of snap executable
gmhmme3= #location of eukaryotic genemark executable
gmhmmp= #location of prokaryotic genemark executable
augustus=/public/home/csxie/miniconda2/envs/augustus/bin/augustus #location of augustus executable
fgenesh= #location of fgenesh executable
evm= #location of EvidenceModeler executable
tRNAscan-SE=/public/home/software/opt/bio/software/tRNAscan-SE/1.3.1/bin/tRNAscan-SE #location of trnascan executable
snoscan=/public/home/software/opt/bio/software/snoscan/0.9.1/bin/snoscan #location of snoscan executable

#-----Other Algorithms
probuild= #location of probuild executable (required for genemark)
##################################################################################################################                                                                 


将snap.sh 与 augustus.sh 拷贝至round2 的结果中
运行 snap.sh 生成 round2.hmm
运行augustus.sh （在conda msq的环境下）
运行 extra2.sh




****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************




#maker运行第三轮
在base环境下运行
round3.lsf
#BSUB -J MPIJob       	### set the job Name
#BSUB -q parallel        ### specify queue
#BSUB -n 240           	### ask for number of cores (default: 1)
#BSUB -R "span[ptile=20]"   	### ask for 20 cores per node
##BSUB -W 10:00        	### set walltime limit: hh:mm
#BSUB -o stdout_%J.out  	### Specify the output and error file. %J is the job-id 
#BSUB -e stderr_%J.err  	### -o and -e mean append, -oo and -eo mean overwrite 
#source /public/home/software/.bashrc
module purge
module load maker/3.01.02-beta-MPICH2
#mpiexec -n 60 maker -base round2 round2_opts.ctl maker_exe.ctl maker_opts.ctl 2>&1
mpirun -n 240 maker -base round3 round3_opts.ctl maker_exe.ctl maker_opts.ctl 2>&1

修改round3_opts.ctl文件
######################################################################################################################################################################################################################################
genome=Mi_sort.fasta #genome sequence (fasta file or fasta embeded in GFF3 file)
organism_type=eukaryotic #eukaryotic or prokaryotic. Default is eukaryotic

#-----Re-annotation Using MAKER Derived GFF3
maker_gff= #MAKER derived GFF3 file
est_pass=0 #use ESTs in maker_gff: 1 = yes, 0 = no
altest_pass=0 #use alternate organism ESTs in maker_gff: 1 = yes, 0 = no
protein_pass=0 #use protein alignments in maker_gff: 1 = yes, 0 = no
rm_pass=0 #use repeats in maker_gff: 1 = yes, 0 = no
model_pass=0 #use gene models in maker_gff: 1 = yes, 0 = no
pred_pass=0 #use ab-initio predictions in maker_gff: 1 = yes, 0 = no
other_pass=0 #passthrough anyything else in maker_gff: 1 = yes, 0 = no

#-----EST Evidence (for best results provide a file for at least one)
est=Mi_CDS_cdhit.fasta#set of ESTs or assembled mRNA-seq in fasta format
altest= #EST/cDNA sequence file in fasta format from an alternate organism
est_gff=/public/home/csxie/msq/Mi/ann/round1/round2_est.gff #aligned ESTs or mRNA-seq from an external GFF3 file
altest_gff= #aligned ESTs from a closly relate species in GFF3 format

#-----Protein Homology Evidence (for best results provide a file for at least one)
protein=affinis.fasta #protein sequence file in fasta format (i.e. from mutiple organisms)
protein_gff=/public/home/csxie/msq/Mi/ann/round1/round2_pro.gff #aligned protein homology evidence from an external GFF3 file

#-----Repeat Masking (leave values blank to skip repeat masking)
model_org=all #select a model organism for RepBase masking in RepeatMasker
rmlib= #provide an organism specific repeat library in fasta format for RepeatMasker
repeat_protein=/public/home/csxie/software/maker/data/te_proteins.fasta #provide a fasta file of transposable element proteins for RepeatRunner
rm_gff=/public/home/csxie/msq/Mi/ann/round1/round2.rm.gff #pre-identified repeat elements from an external GFF3 file
prok_rm=0 #forces MAKER to repeatmask prokaryotes (no reason to change this), 1 = yes, 0 = no
softmask=1 #use soft-masking rather than hard-masking in BLAST (i.e. seg and dust filtering)

#-----Gene Prediction
snaphmm=round2.hmm #SNAP HMM file
gmhmm= #GeneMark HMM file
augustus_species=BUSCO_Train_augs_456876691 #Augustus gene prediction species model
fgenesh_par_file= #FGENESH parameter file
pred_gff= #ab-initio predictions from an external GFF3 file
model_gff= #annotated gene models from an external GFF3 file (annotation pass-through)
run_evm=0 #run EvidenceModeler, 1 = yes, 0 = no
est2genome=0 #infer gene predictions directly from ESTs, 1 = yes, 0 = no
protein2genome=0 #infer predictions from protein homology, 1 = yes, 0 = no
trna=0 #find tRNAs with tRNAscan, 1 = yes, 0 = no
snoscan_rrna= #rRNA file to have Snoscan find snoRNAs
snoscan_meth= #-O-methylation site fileto have Snoscan find snoRNAs
unmask=0 #also run ab-initio prediction programs on unmasked sequence, 1 = yes, 0 = no
allow_overlap= #allowed gene overlap fraction (value from 0 to 1, blank for default)

#-----Other Annotation Feature Types (features MAKER doesn't recognize)
other_gff= #extra features to pass-through to final MAKER generated GFF3 file

#-----External Application Behavior Options
alt_peptide=C #amino acid used to replace non-standard amino acids in BLAST databases
cpus=1 #max number of cpus to use in BLAST and RepeatMasker (not for MPI, leave 1 when using MPI)

#-----MAKER Behavior Options
max_dna_len=100000 #length for dividing up contigs into chunks (increases/decreases memory usage)
min_contig=1 #skip genome contigs below this length (under 10kb are often useless)

pred_flank=200 #flank for extending evidence clusters sent to gene predictors
pred_stats=0 #report AED and QI statistics for all predictions as well as models
AED_threshold=1 #Maximum Annotation Edit Distance allowed (bound by 0 and 1)
min_protein=0 #require at least this many amino acids in predicted proteins
alt_splice=0 #Take extra steps to try and find alternative splicing, 1 = yes, 0 = no
always_complete=0 #extra steps to force start and stop codons, 1 = yes, 0 = no
map_forward=0 #map names and attributes forward from old GFF3 genes, 1 = yes, 0 = no
keep_preds=0 #Concordance threshold to add unsupported gene prediction (bound by 0 and 1)

split_hit=10000 #length for the splitting of hits (expected max intron size for evidence alignments)
min_intron=20 #minimum intron length (used for alignment polishing)
single_exon=0 #consider single exon EST evidence when generating annotations, 1 = yes, 0 = no
single_length=250 #min length required for single exon ESTs if 'single_exon is enabled'
correct_est_fusion=0 #limits use of ESTs in annotation to avoid fusion genes

tries=100 #number of times to try a contig if there is a failure for some reason
clean_try=0 #remove all data from previous run before retrying, 1 = yes, 0 = no
clean_up=0 #removes theVoid directory with individual analysis files, 1 = yes, 0 = no
TMP= #specify a directory other than the system default temporary directory for temporary files
######################################################################################################################################################################################################################################

运行 snap.sh
运行final.sh 
#########################
name=$1
gff3_merge -s -d  round3_master_datastore_index.log  > $name.all.gff
fasta_merge -d round3_master_datastore_index.log
# GFF w/o the sequences
gff3_merge -n -s -g -d round3_master_datastore_index.log > $name.noseq.gff

maker_map_ids --prefix $name --justify 5  $name.all.gff > $name.map
map_gff_ids $name.map $name.all.gff
map_gff_ids $name.map $name.noseq.gff
map_fasta_ids $name.map round3.all.maker.transcripts.fasta
map_fasta_ids $name.map round3.all.maker.proteins.fasta

cp round3.all.maker.transcripts.fasta $name.transcripts.fasta
cp round3.all.maker.proteins.fasta $name.proteins.fasta




最终结果得到的 $name.noseq.gff  $name.transcripts.fasta $name.proteins.fasta即为基因结构预测的全部结果
